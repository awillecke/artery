[General]
sim-time-limit = 1e6 s

debug-on-errors = true
print-undisposed = true

cmdenv-express-mode = true
cmdenv-autoflush = true

**.scalar-recording = false
**.vector-recording = false

*.traci.core.version = -1
*.traci.core.selfStopping = false
*.traci.launcher.typename = "PosixLauncher"
*.traci.launcher.sumo = "sumo-gui"

ned-path = .
network = artery.inet.World

*.node[*].wlan[*].typename = "VanetNic"
*.node[*].wlan[*].radio.channelNumber = 180
*.node[*].wlan[*].radio.carrierFrequency = 5.9 GHz
*.node[*].wlan[*].radio.transmitter.power = 200 mW

*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2013-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")


##########################################################
#                   Common parameters                    #
##########################################################

**.numberOfCars = ${nCars = 4}
**.numberOfCarsPerPlatoon = ${platoonSize = 4}
**.numberOfLanes = ${nLanes = 1}

##########################################################
#                      Application                       #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.vector-recording = true
#collect data for time
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.simulationDuration = 1e6 s


##########################################################
#                    Position helper                     #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.helper_type = "PositionHelper"
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.nLanes = ${nLanes}
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.platoonSize = ${platoonSize}
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.nCars = ${nCars}

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.priority = ${priority = 4}
#packet size for platooning beacon
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.packetSize = ${packetSize = 200}
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.useControllerAcceleration = true
#set to 0 the packet loss rate for the unicast protocol
*.node[*].middleware.artery.application.platooning.PlatooningService.unicast.packetLossRate = 0

##########################################################
#               Scenario common parameters               #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.scenario_type = "SimpleScenario"

#controller and engine related parameters
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccC1 = 0.5
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccXi = 1
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccOmegaN = 0.2 Hz
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.engineTau = 0.5 s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegH = ${ploegH = 0.2}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKp = 0.2
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKd = 0.7
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.useRealisticEngine = false

#*.node[*].scenario.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.controller = "PLOEG" 
#
##headway for ACCs
#**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1 ! controller}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.accHeadway = ${0.1}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderHeadway = ${leaderHeadway = 1.2}s
#
##average leader speed
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderSpeed = ${leaderSpeed = 100}kmph



[Config platooning_erlangen_test]
*.traci.launcher.sumocfg = "./erlangen/erlangen.sumo.cfg"




[Config platooning_bs-ring-v2_test]
*.traci.launcher.sumocfg = "./bs-ring-v2/iteration_100.sumocfg"




[Config platooning_freeway_join]

network = scenario

*.traci.launcher.sumocfg = "./freeway/freeway.sumo.cfg"

##########################################################
#                   Common parameters                    #
##########################################################

**.numberOfCars = ${nCarsJoin = 4}
**.numberOfCarsPerPlatoon = ${platoonSizeJoin = 4}
**.numberOfLanes = ${nLanesJoin = 1}
**.controllerXi = ${caccXi = 1, 2}
**.controllerOmegaN = ${caccOmegaN = 0.2, 1 ! caccXi}

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.helper_type = "JoinPositionHelper"

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccC1 = 0.5
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccXi = ${caccXi}
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccOmegaN = ${caccOmegaN} Hz
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.engineTau = 0.5 s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegH = ${0.5}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKp = 0.2
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKd = 0.7
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.useRealisticEngine = false

#controllers to be tested
**.numericController = 0
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.controller = "CACC"

#headway for ACCs
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.accHeadway = 0.1 s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderHeadway = ${1.2}s

#average leader speed
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderSpeed = ${100}kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.vector-recording = true
#collect data for time
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.simulationDuration = 1e6 s

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.beaconingInterval = ${0.1}s
#access category for platooning beacons
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.priority = ${2}
#packet size for platooning beacon
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.packetSize = ${200}
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.useControllerAcceleration = true
#set to 0 the packet loss rate for the unicast protocol
*.node[*].middleware.artery.application.platooning.PlatooningService.unicast.packetLossRate = 0

##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "JoinTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${100}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCarsJoin}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSizeJoin}
#use nLanes lanes
**.traffic.nLanes = ${nLanesJoin}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#insert vehicles already at steady-state. distance depends on controller
**.traffic.platoonInsertDistance = 5 m
**.traffic.platoonInsertHeadway = 0 s
**.traffic.platoonLeaderHeadway = ${1.2}s


#use the join maneuver scenario
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario_type = "JoinManeuverScenario"

output-vector-file = ${resultdir}/${configname}_${caccXi}_${caccOmegaN}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${caccXi}_${caccOmegaN}_${repetition}.sca

