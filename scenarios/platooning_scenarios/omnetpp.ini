[General]
sim-time-limit = 6000s
debug-on-errors = true
print-undisposed = true

cmdenv-express-mode = true
cmdenv-autoflush = true

**.scalar-recording = false
**.vector-recording = false

*.traci.core.version = -1
*.traci.launcher.typename = "PosixLauncher"
*.traci.launcher.sumo = "/home/alex/git/plexe-sumo/sumo/bin/sumo-gui"


network = artery.inet.World

*.node[*].wlan[*].typename = "VanetNic"
*.node[*].wlan[*].radio.channelNumber = 180
*.node[*].wlan[*].radio.carrierFrequency = 5.9 GHz
*.node[*].wlan[*].radio.transmitter.power = 200 mW

*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2013-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")


##########################################################
#                   Common parameters                    #
##########################################################

**.duration = ${sDuration = 6000s}
*.node[*].middleware.artery.application.platooning.PlatooningService.simulationDuration = ${sDuration}

**.numberOfCars = ${nCars = 4}
**.numberOfCarsPerPlatoon = ${platoonSize = 4}
**.numberOfLanes = ${nLanes = 1}

##########################################################
#                      Application                       #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.vector-recording = true
#collect data for time
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.simulationDuration = ${sDuration}


##########################################################
#                    Position helper                     #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.helper_type = "PositionHelper"
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.nLanes = ${nLanes}
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.platoonSize = ${platoonSize}
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.nCars = ${nCars}

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.priority = ${priority = 4}
#packet size for platooning beacon
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.packetSize = ${packetSize = 200}
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.useControllerAcceleration = true
#set to 0 the packet loss rate for the unicast protocol
*.node[*].middleware.artery.application.platooning.PlatooningService.unicast.packetLossRate = 0

##########################################################
#               Scenario common parameters               #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.scenario_type = "SimpleScenario"

#controller and engine related parameters
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccC1 = 0.5
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccXi = 1
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccOmegaN = 0.2 Hz
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.engineTau = 0.5 s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegH = ${ploegH = 0.2}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKp = 0.2
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKd = 0.7
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.useRealisticEngine = false

#*.node[*].scenario.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.controller = "PLOEG" 
#
##headway for ACCs
#**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1 ! controller}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.accHeadway = ${0.1}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderHeadway = ${leaderHeadway = 1.2}s
#
##average leader speed
#*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderSpeed = ${leaderSpeed = 100}kmph

[Config platooning_erlangen_test]
*.traci.launcher.sumocfg = "./erlangen.sumo.cfg"

[Config platooning_bs-ring-v2_test]
*.traci.launcher.sumocfg = "./bs-ring-v2/iteration_100.sumocfg"

