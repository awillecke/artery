[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 10s
num-rngs = 6

sim-time-limit = 100000s
debug-on-errors = true
print-undisposed = true

cmdenv-express-mode = true
cmdenv-autoflush = true

**.scalar-recording = false
**.vector-recording = false

*.traci.core.version = -1
*.traci.launcher.typename = "PosixLauncher"
*.traci.launcher.sumo = "sumo-gui"
*.traci.launcher.sumocfg = "./sumocfg/freeway.sumo.cfg"

*.node[*].wlan[*].typename = "VanetNic"
*.node[*].wlan[*].radio.channelNumber = 180
*.node[*].wlan[*].radio.carrierFrequency = 5.9 GHz
*.node[*].wlan[*].radio.transmitter.power = 200 mW

*.node[*].middleware.updateInterval = 0.1s
*.node[*].middleware.datetime = "2013-06-01 12:35:00"
*.node[*].middleware.services = xmldoc("services.xml")

network = artery.inet.World


##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

*.playgroundSizeX = 65000m
*.playgroundSizeY = 25000m
*.playgroundSizeZ = 50m

#let our modules decide when to stop the simulation
sim-time-limit = 1e6 s

**.debug = false
**.coreDebug = false

##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = false

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.debug = false

##########################################################
#            WorldUtility parameters                     #
##########################################################
*.world.useTorus = false
*.world.use2D = false

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
#*.manager.updateInterval = 0.01s
#*.manager.host = "localhost"
#*.manager.moduleType = "Car"
#*.manager.moduleName = "node"
#*.manager.moduleDisplayString = ""
#*.manager.autoShutdown = true
#*.manager.margin = 25

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.node[*].nic.mac1609_4.useAcks = true
*.node[*].nic.mac1609_4.useServiceChannel = false
*.node[*].nic.mac1609_4.txPower = 126mW
*.node[*].nic.phy80211p.usePropagationDelay = true
*.node[*].nic.phy80211p.sensitivity = -89dBm
*.node[*].nic.phy80211p.useThermalNoise = true
*.node[*].nic.phy80211p.thermalNoise = -110dBm
*.node[*].nic.phy80211p.decider = xmldoc("config.xml")
*.node[*].nic.phy80211p.analogueModels = xmldoc("config.xml")

*.node[*].applType = "artery.veins.ApplicationLayer"
*.node[*].appl.middleware.updateInterval = 0.1s
*.node[*].appl.middleware.datetime = "2013-06-01 12:35:00"
*.node[*].appl.middleware.services = xmldoc("services.xml")

##########################################################
#                      Mobility                          #
##########################################################
*.node[*].mobility.x = 0
*.node[*].mobility.y = 0
*.node[*].mobility.z = 1.895


##########################################################
#                    Seeds and PRNGs                     #
##########################################################
seed-set = ${repetition}
**.seed = ${repetition}

*.node[*].unicast.rng-0 = 1
*.node[*].prot.rng-0 = 2
*.node[*].appl.rng-0 = 3
*.node[*].scenario.rng-0 = 4
**.traffic.rng-0 = 5

##########################################################
#                   Common parameters                    #
##########################################################

**.numberOfCars = ${nCars = 8}
**.numberOfCarsPerPlatoon = ${platoonSize = 8}
**.numberOfLanes = ${nLanes = 1}
*.node[*].middleware.artery.application.platooning.PlatooningService.simulationDuration = 6000s

##########################################################
#                    Position helper                     #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.helper_type = "PositionHelper"
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.nLanes = ${nLanes}
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.platoonSize = ${platoonSize}
*.node[*].middleware.artery.application.platooning.PlatooningService.helper.nCars = ${nCars}

##########################################################
#               Scenario common parameters               #
##########################################################

#controller and engine related parameters
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccC1 = 0.5
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccXi = 1
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.caccOmegaN = 0.2 Hz
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.engineTau = 0.5 s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegH = ${ploegH = 0.5}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKp = 0.2
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.ploegKd = 0.7
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.useRealisticEngine = false

#controllers to be tested
**.numericController = ${controller = 0, 0, 1, 2, 3}
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.controller = ${sController = "ACC", "ACC", "CACC", "PLOEG", "CONSENSUS" ! controller}

#headway for ACCs
**.headway = ${headway = 0.3, 1.2, 0.1, 0.1, 0.1 ! controller}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.accHeadway = ${headway}s
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderHeadway = ${leaderHeadway = 1.2}s

#average leader speed
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderSpeed = ${leaderSpeed = 100}kmph

##########################################################
#                      Application                       #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.appl_type = "SimplePlatooningApp"
#enable statistics recording for the application
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.*.vector-recording = true
#collect data for time
*.node[*].middleware.artery.application.platooning.PlatooningService.appl.simulationDuration = 10000 s

##########################################################
#                Communication protocols                 #
##########################################################

*.node[*].middleware.artery.application.platooning.PlatooningService.protocol_type = "SimplePlatooningBeaconing"
#enable statistics recording for the network layer
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.scalar-recording = true
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.*.vector-recording = true
#set the beaconing interval to be 0.1s
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.beaconingInterval = ${beaconInterval = 0.1}s
#access category for platooning beacons
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.priority = ${priority = 4}
#packet size for platooning beacon
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.packetSize = ${packetSize = 200}
#via wireless send acceleration computed by the controller, not the actual one
*.node[*].middleware.artery.application.platooning.PlatooningService.prot.useControllerAcceleration = true
#set to 0 the packet loss rate for the unicast protocol
*.node[*].middleware.artery.application.platooning.PlatooningService.unicast.packetLossRate = 0

##########################################################
#                    Traffic manager                     #
##########################################################

**.traffic_type = "PlatoonsTrafficManager"
#insert platooning vehicles at time
**.traffic.platoonInsertTime = 1 s
#insert platooning vehicles with a speed of
**.traffic.platoonInsertSpeed = ${leaderSpeed}kmph
#insert nCars platooning vehicles
**.traffic.nCars = ${nCars}
#let platoonSize cars per platoon
**.traffic.platoonSize = ${platoonSize}
#use nLanes lanes
**.traffic.nLanes = ${nLanes}
#SUMO vtype for platooning vehicles
**.traffic.platooningVType = "vtypeauto"
#insert vehicles already at steady-state. distance depends on controller
**.traffic.platoonInsertDistance = ${2, 2, 5, 2, 15 ! controller}m
**.traffic.platoonInsertHeadway = ${0.3, 1.2, 0, 0.5, 0.8 ! controller}s
**.traffic.platoonLeaderHeadway = ${leaderHeadway}s


#disable statistics recording for all other modules
**.scalar-recording = false
**.vector-recording = false

[Config Sinusoidal]

repeat = 1

#use the sinusoidal scenario
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario_type = "SinusoidalScenario"

#make the leader accelerate and decelerate with a sinusoidal trend. set to 0 for constant speed
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.oscillationAmplitude = 10 kmph
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.startOscillating = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config Braking]

repeat = 1

#use the braking scenario
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario_type = "BrakingScenario"

#make the leader decelerate with a certain deceleration
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.leaderOscillationFrequency = 0.2 Hz
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.brakingDeceleration = 8 mpsps
*.node[*].middleware.artery.application.platooning.PlatooningService.scenario.startBraking = 5 s

output-vector-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/${configname}_${controller}_${headway}_${repetition}.sca

[Config SinusoidalNoGui]
extends = Sinusoidal
*.manager.commandLine = "sumo --remote-port $port --seed $seed --configuration-file $configFile"
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Sinusoidal_${controller}_${headway}_${repetition}.sca

[Config BrakingNoGui]
extends = Braking
*.manager.commandLine = "sumo --remote-port $port --seed $seed --configuration-file $configFile"
#force the config name in the output file to be the same as for the gui experiment
output-vector-file = ${resultdir}/Braking_${controller}_${headway}_${repetition}.vec
output-scalar-file = ${resultdir}/Braking_${controller}_${headway}_${repetition}.sca
